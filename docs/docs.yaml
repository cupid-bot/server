openapi: 3.0.3

info:
  title: Cupid API
  description: |
    The API server that powers Cupid bot and the web interface.

    ## Authentication

    Each endpoint will require one of four types of authentication:

    - App authentication
    - User authentication
    - Any authentication
    - No authentication

    These are explained below:

    ## App authentication

    For these endpoints, you must use an app token to authenticate.

    An app token can only be obtained using the server management CLI: `cupid create-app <app-name>` (more information in the server README).

    The app token should be passed in an HTTP `Authorization` header, using the bearer scheme (like `Authorization: Bearer <token>`).

    ## User authentication

    You must be authorised to act on behalf of a user for these endpoints. There are two ways of authenticating:

    ### User session variant

    For this variant, the user must complete a Discord OAuth2 authentication flow. Then, the Discord bearer token ('access token') can be exchanged for a Cupid user token, using the [`POST /auth/login`](#post-/auth/login) endpoint (see the endpoint for more information).

    The user token can then be used for authentication in an HTTP `Authorization` header with the bearer scheme, in the same way as for app authentication.

    ### App variant

    For this variant, an app token is passed in the same way as for app authentication. To indicate which player you wish to act on behalf of, set the `Cupid-User` header to their user ID.

    ## Any authentication

    Either user authentication or app authentication may be used for these endpoints.

    For these endpoints, the app variant of user authentication is equivalent to simple app authentication: the `Cupid-User` header will be ignored.

    ## No authentication

    No authentication is needed for these endpoints. If authentication is passed, it will be accepted but ignored.

  version: 1.0.0

servers:
- url: https://api.example.com
  description: Production server.

tags:
- name: users
  description: Manage and view users.
- name: relationships
  description: Manage relationships.
- name: auth
  description: Manage your client authentication.
- name: testing
  description: Testing mode endpoints, used for running tests on the server. These will not be enabled in production mode servers.

paths:
  /users/list:
    get:
      tags:
      - users
      summary: List users
      description: Get a paginated list of users with associated data.
      x-badges:
      - color: green
        label: 'Auth: Any'
      operationId: list_users
      parameters:
      - name: search
        in: query
        description: A query to filter users.
        schema:
          type: string
      - name: per_page
        in: query
        description: How many users to return per page.
        schema:
          type: integer
          default: 20
      - name: page
        in: query
        description: The page number to get.
        schema:
          type: integer
          default: 0
      security:
      - token: []
      responses:
        200:
          description: Success - a list of users
          content:
            application/json:
              schema:
                type: object
                description: One page of users.
                properties:
                  page:
                    type: integer
                    description: The current page number.
                  per_page:
                    type: integer
                    description: The users displayed per page.
                    example: 20
                  pages:
                    type: integer
                    description: The total number of pages.
                    example: 3
                  total:
                    type: integer
                    description: The total number of users.
                    example: 55
                  users:
                    type: array
                    description: The users on this page.
                    items:
                      $ref: '#/components/schemas/User'
        401:
          $ref: '#/components/responses/UnauthorisedError'
        422:
          $ref: '#/components/responses/ValidationError'

  /users/graph:
    get:
      tags:
      - users
      summary: Get relationship graph
      description: Get a graph of all users and their relationships.
      x-badges:
      - color: green
        label: 'Auth: Any'
      operationId: get_user_graph
      security:
      - token: []
      responses:
        200:
          description: Success - a list of connections
          content:
            application/json:
              schema:
                type: object
                properties:
                  users:
                    type: object
                    description: A map of user IDs to user objects.
                    additionalProperties:
                      $ref: '#/components/schemas/User'
                  relationships:
                    type: array
                    description: A list of relationships between users.
                    items:
                      $ref: '#/components/schemas/PartialRelationship'
        401:
          $ref: '#/components/responses/UnauthorisedError'

  /users/me/gender:
    put:
      tags:
      - users
      summary: Update gender
      description: Change the gender of the authenticated user.
      x-badges:
      - color: purple
        label: 'Auth: User'
      operationId: update_gender
      security:
      - token: []
      requestBody:
        description: The user's new information.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                gender:
                  $ref: '#/components/schemas/Gender'
      responses:
        200:
          description: Success - user updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        401:
          $ref: '#/components/responses/UnauthorisedError'
        404:
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /user/{id}:
    get:
      tags:
      - users
      summary: Get user
      description: Get information on a user by ID.
      x-badges:
      - color: green
        label: 'Auth: Any'
      operationId: get_user
      security:
      - token: []
      parameters:
      - name: id
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/UserId'
      responses:
        200:
          description: Success - user retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/User'
                  relationships:
                    type: object
                    properties:
                      accepted:
                        type: array
                        description: Accepted relationships the user is part of.
                        items:
                          $ref: '#/components/schemas/Relationship'
                      incoming:
                        type: array
                        description: Incoming relationship proposals.
                        items:
                          $ref: '#/components/schemas/Relationship'
                      outgoing:
                        type: array
                        description: Outgoing relationship proposals.
                        items:
                          $ref: '#/components/schemas/Relationship'
        401:
          $ref: '#/components/responses/UnauthorisedError'
        404:
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    put:
      tags:
      - users
      summary: Create/update user
      description: Update a user's details by ID, or register the user if they have not been not already.
      x-badges:
      - color: blue
        label: 'Auth: App'
      operationId: update_user
      security:
      - token: []
      parameters:
      - name: id
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/UserId'
      requestBody:
        description: The user to create.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserData'
      responses:
        200:
          description: Success - user updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        201:
          description: Success - new user created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        401:
          $ref: '#/components/responses/UnauthorisedError'
        403:
          description: A user session token was used
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        422:
          $ref: '#/components/responses/ValidationError'

  /user/<id:int>/relationship:
    post:
      tags:
      - relationships
      summary: Propose a relationship
      description: Create a new relationship proposal for *marriage with* or *adoption of* another user. A proposal of adoption should be made by the parent, not the child.
      x-badges:
      - color: purple
        label: 'Auth: User'
      operationId: propose_relationship
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          description: The ID of the user to create a relationship with.
      security:
      - token: []
      requestBody:
        description: Information for the relationship to create.
        content:
          application/json:
            schema:
              type: object
              properties:
                kind:
                  $ref: '#/components/schemas/RelationshipKind'
      responses:
        201:
          description: Success - Proposal created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Relationship'
        404:
          description: A user was not found by that ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          $ref: '#/components/responses/UnauthorisedError'
        403:
          description: The relationship is not allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        422:
          $ref: '#/components/responses/ValidationError'

    get:
      tags:
      - relationships
      summary: Get a relationship
      description: Get information on the relationship between yourself and another user, if there is one.
      x-badges:
      - color: purple
        label: 'Auth: User'
      operationId: get_relationship
      security:
      - token: []
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          description: The ID of the user to get the relationship with.
      responses:
        200:
          description: Success - Relationship fetched
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Relationship'
        401:
          $ref: '#/components/responses/UnauthorisedError'
        404:
          description: No relationship exists with that user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      tags:
      - relationships
      summary: Leave a relationship
      description: Terminate a relationship with another user, or reject it if it has not yet been accepted.
      x-badges:
      - color: purple
        label: 'Auth: User'
      operationId: leave_relationship
      security:
      - token: []
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          description: The ID of the user who the relationship is with.
      responses:
        204:
          description: Success - Relationship deleted
        401:
          $ref: '#/components/responses/UnauthorisedError'
        404:
          description: No relationship exists with that user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /user/<id:int>/relationship/accept:
    post:
      tags:
      - relationships
      summary: Accept a proposal
      description: Accept a relationship proposal for marriage or adoption.
      x-badges:
      - color: purple
        label: 'Auth: User'
      operationId: accept_relationship
      security:
      - token: []
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          description: The ID of the user who's proposal you are accepting.
      responses:
        200:
          description: Success - Proposal accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Relationship'
        401:
          $ref: '#/components/responses/UnauthorisedError'
        403:
          description: The relationship is not allowed, or you initiated it
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: The proposal was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        409:
          description: The proposal was already accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/login:
    post:
      tags:
      - auth
      summary: Login with Discord
      description: Authenticate with a Discord OAuth2 bearer token ('user access token') to create an authentication session.
      x-badges:
      - color: red
        label: 'Auth: None'
      operationId: discord_authenticate
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                  description: A Discord OAuth2 bearer token for a user.
      responses:
        200:
          description: Success - Session created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionWithToken'
        201:
          description: Success - Session and user created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionWithToken'
        422:
          description: Invalid JSON body or bad Discord token
          content:
            application/json:
              schema:
                oneOf:
                - $ref: '#/components/schemas/ValidationError'
                - $ref: '#/components/schemas/Error'

  /auth/me:
    get:
      tags:
      - auth
      summary: Get auth details
      description: Get information on either the authenticated user or authenticated app - whichever was used to authenticate.
      x-badges:
      - color: green
        label: 'Auth: Any'
      operationId: get_self
      security:
      - token: []
      responses:
        200:
          description: Success - retrieved session or app
          content:
            application/json:
              schema:
                oneOf:
                - $ref: '#/components/schemas/App'
                - $ref: '#/components/schemas/Session'
        401:
          $ref: '#/components/responses/UnauthorisedError'

    delete:
      tags:
      - auth
      summary: Delete token
      description: Delete either the current authentication session or currently authenticated app, as applicable.
      x-badges:
      - color: green
        label: 'Auth: Any'
      operationId: delete_session
      security:
      - token: []
      responses:
        204:
          description: Success - deleted session or app
        401:
          $ref: '#/components/responses/UnauthorisedError'

    patch:
      tags:
      - auth
      summary: Refresh token
      description: Replace the token used to authenticate, of either an app or session.
      x-badges:
      - color: green
        label: 'Auth: Any'
      operationId: refresh_token
      security:
      - token: []
      responses:
        200:
          description: Success - refreshed token
          content:
            application/json:
              schema:
                oneOf:
                - $ref: '#/components/schemas/AppWithToken'
                - $ref: '#/components/schemas/SessionWithToken'
        401:
          $ref: '#/components/responses/UnauthorisedError'

  /testing:
    get:
      tags:
      - testing
      summary: Check testing mode
      description: Check if the server is running in testing mode or not. If it is not, the rest of the testing endpoints will return 403 errors.
      x-badges:
      - color: red
        label: 'Auth: None'
      operationId: check_testing
      responses:
        200:
          description: Success - testing mode retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  testing:
                    type: boolean
                    description: Whether or not the server is in testing mode.

  /testing/clear:
    post:
      tags:
      - testing
      summary: Clear database
      description: Completely clear every table in the entire database.
      x-badges:
      - color: orange
        label: 'Testing Mode'
      - color: red
        label: 'Auth: None'
      operationId: database_wipe
      responses:
        204:
          description: Success - database wiped
        403:
          $ref: '#/components/responses/TestingModeDisabled'

  /testing/app:
    post:
      tags:
      - testing
      summary: Create app
      description: Create a new app.
      x-badges:
      - color: orange
        label: 'Testing Mode'
      - color: red
        label: 'Auth: None'
      operationId: app_create
      requestBody:
        description: Information for the app to create.
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: The name of the app.
      responses:
        201:
          description: Success - app created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppWithToken'
        403:
          $ref: '#/components/responses/TestingModeDisabled'
        422:
          $ref: '#/components/responses/ValidationError'

  /testing/discord_user:
    post:
      tags:
      - testing
      summary: Register a Discord token
      description: Register a Discord OAuth2 bearer token to be used later to create a user session.
      x-badges:
      - color: orange
        label: 'Testing Mode'
      - color: red
        label: 'Auth: None'
      operationId: register_discord_token
      requestBody:
        description: Information for the Discord user to register.
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  description: The numerical Discord user ID, as a string. An integer will also be accepted.
                  example: '496381034628251688'
                token:
                  type: string
                  description: The fake Discord OAuth2 bearer token.
                name:
                  type: string
                  description: The fake user's name.
                  example: Artemis
                discriminator:
                  type: string
                  pattern: '^[0-9]{4}$'
                  description: The numerical Discord discriminator, as a padded string.
                  example: 0019
                avatar_url:
                  type: string
                  description: The URL of the fake user's Discord avatar.
                  example: https://example.com/path/to/image.png
      responses:
        201:
          content:
            description: Success - Token registered

  /testing/coverage:
    get:
      tags:
      - testing
      summary: Get code coverage
      description: Get code coverage for since the server started up.
      x-badges:
      - color: orange
        label: 'Testing Mode'
      - color: red
        label: 'Auth: None'
      operationId: get_coverage
      responses:
        200:
          description: Success - coverage report retrieved
          content:
            application/vnd.sqlite3:
              schema:
                type: string
                format: binary
                description: An Sqlite 3 file which can be rendered as a JSON or HTML coverage report by the Coverage.py library.
        403:
          $ref: '#/components/responses/TestingModeDisabled'

components:
  schemas:
    UserData:
      type: object
      description: The data for a user.
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 255
          description: The user's name.
          example: Artemis
        discriminator:
          type: string
          pattern: '^[0-9]{4}$'
          description: The numerical Discord discriminator, as a padded string.
          example: 0019
        avatar_url:
          type: string
          minLength: 7
          maxLength: 255
          description: The URL of the user's Discord avatar.
          example: https://cdn.discordapp.com/avatars/496381034628251688/3bcff95e2173c60ec712e70d10b28edf.png
        gender:
          $ref: "#/components/schemas/Gender"

    User:
      description: A user of the service.
      allOf:
      - $ref: "#/components/schemas/UserData"
      - type: object
        properties:
          id:
            $ref: "#/components/schemas/UserId"

    UserId:
      type: string
      description: The numerical Discord user ID, as a string. For input, an integer will also be accepted.
      example: '496381034628251688'

    Gender:
      type: string
      description: The gender of the user.
      enum:
      - non_binary
      - female
      - male

    RelationshipKind:
      type: string
      description: The type of the relationship.
      enum:
      - marriage
      - adoption

    PartialRelationship:
      type: object
      properties:
        id:
          type: integer
          description: The ID of the relationship.
        initiator:
          $ref: '#/components/schemas/UserId'
        other:
          $ref: '#/components/schemas/UserId'
        kind:
          $ref: '#/components/schemas/RelationshipKind'
        created_at:
          $ref: '#/components/schemas/Timestamp'
        accepted_at:
          $ref: '#/components/schemas/Timestamp'

    Relationship:
      type: object
      properties:
        id:
          type: integer
          description: The ID of the relationship.
        initiator:
          $ref: '#/components/schemas/User'
        other:
          $ref: '#/components/schemas/User'
        kind:
          $ref: '#/components/schemas/RelationshipKind'
        accepted:
          type: boolean
          description: Whether the relationship has been accepted or not.
        created_at:
          $ref: '#/components/schemas/Timestamp'
        accepted_at:
          oneOf:
          - $ref: '#/components/schemas/Timestamp'
          - type: 'null'

    TokenObject:
      type: object
      properties:
        token:
          type: string
          description: The bearer token to use to authenticate.
          example: 'AAAAAAADk0XpDIlzUO3MgI706W0habli8TAp-4XTp5Zy8CVAwYY'

    Session:
      type: object
      properties:
        id:
          type: integer
          description: Session ID.
          example: 124
        user:
          $ref: '#/components/schemas/User'
        expires_at:
          $ref: '#/components/schemas/Timestamp'

    SessionWithToken:
      allOf:
      - $ref: '#/components/schemas/Session'
      - $ref: '#/components/schemas/TokenObject'

    App:
      type: object
      properties:
        id:
          type: integer
          description: App ID.
          example: 4
        name:
          type: string
          description: App name

    AppWithToken:
      allOf:
      - $ref: '#/components/schemas/App'
      - $ref: '#/components/schemas/TokenObject'

    Timestamp:
      type: integer
      description: A date as a Unix timestamp in seconds.
      example: 1625425373.106704

    Error:
      type: object
      description: An error returned by the API.
      properties:
        status:
          type: integer
          description: The HTTP status code.
          example: 422
        description:
          type: string
          description: Generic description of the error
          example: Not found
        message:
          type: string
          description: More specific details about the error
          example: User not found by ID "139"

    SingleValidationError:
      type: object
      description: A single validation error.
      properties:
        loc:
          type: array
          description: The JSON path to where error occured.
          example: ['users', 0, 'id']
          items:
            anyOf:
            - type: string
            - type: integer
        msg:
          type: string
          description: A human-readable description of the error.
          example: value is not a valid integer
        type:
          type: string
          description: A machine-readable description of the error.
          example: type_error.integer

    ValidationError:
      allOf:
      - $ref: '#/components/schemas/Error'
      - type: object
        properties:
          errors:
            type: array
            items:
              $ref: '#/components/schemas/SingleValidationError'

  securitySchemes:
    token:
      type: http
      scheme: bearer
      description: Bearer token for a user authentication session or an app.

  responses:
    UnauthorisedError:
      description: Access token is missing or invalid
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    ValidationError:
      description: JSON body or URL query string is invalid
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ValidationError'

    TestingModeDisabled:
      description: This endpoint is unavailable because testing mode is disabled
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
